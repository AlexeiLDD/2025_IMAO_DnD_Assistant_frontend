// src/components/ActualDiceTray/ActualDiceTray.tsx
import React, { useState, useCallback } from 'react';
import uniqid from 'uniqid';

import { Canvas } from '@react-three/fiber';
import { OrthographicCamera, OrbitControls, Html } from '@react-three/drei';

import { DiceToolbar } from '../diceToolbar';
import s from './ActualDiceTray.module.scss';
import { DieInstance } from '../../model';
import { DiceType, rollDice } from 'shared/lib';
import { layoutConfigs } from '../../lib';
import { AnimatedDieR3F } from '../../dices';

const MAX_DICE = 96;

export const ActualDiceTray: React.FC = () => {
  const [tray, setTray] = useState<DieInstance[]>([]);
  const [spinFlag, setSpinFlag] = useState(0);
  const [warning, setWarning] = useState<string | null>(null);

  // –°—á—ë—Ç—á–∏–∫ –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã—Ö –∞–Ω–∏–º–∞—Ü–∏–π
  const [settleCount, setSettleCount] = useState(0);
  // –ó–Ω–∞—á–µ–Ω–∏–µ —Å—É–º–º—ã, –ø–æ–∫–∞–∑—ã–≤–∞—é—â–µ–µ—Å—è –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
  const [displaySum, setDisplaySum] = useState<number | null>(null);

  // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –∫—É–±–∏–∫, –µ—Å–ª–∏ –Ω–µ –ø—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç
  const handleAdd = useCallback((type: DiceType) => {
    if (tray.length >= MAX_DICE) {
      setWarning(`–ù–µ–ª—å–∑—è –¥–æ–±–∞–≤–∏—Ç—å –±–æ–ª–µ–µ ${MAX_DICE} –∫–æ—Å—Ç–µ–π`);
      return;
    }
    setWarning(null);
    setTray(prev => [
      ...prev,
      { id: uniqid(), type, value: rollDice(type), removing: false },
    ]);
  }, [tray]);

  // –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é —É–¥–∞–ª–µ–Ω–∏—è
  const handleInitRemove = useCallback((id: string) => {
    setWarning(null);
    setTray(prev =>
      prev.map(d =>
        d.id === id ? { ...d, removing: true } : d
      )
    );
  }, []);

  // –£–±–∏—Ä–∞–µ–º –∫—É–±–∏–∫ –æ–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω–æ –ø–æ—Å–ª–µ –∞–Ω–∏–º–∞—Ü–∏–∏
  const handleFinalizeRemove = useCallback((id: string) => {
    setTray(prev => prev.filter(d => d.id !== id));
  }, []);

  // –ë—Ä–æ—Å–∞–µ–º –≤—Å–µ –∫—É–±–∏–∫–∏ ‚Äî –æ–±–Ω—É–ª—è–µ–º —Å—á—ë—Ç—á–∏–∫–∏ –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –Ω–æ–≤–æ–µ –≤—Ä–∞—â–µ–Ω–∏–µ
  const handleRollAll = useCallback(() => {
    setWarning(null);
    setSettleCount(0);
    setDisplaySum(null);
    setSpinFlag(f => f + 1);
    setTray(prev =>
      prev.map(d => ({ ...d, value: rollDice(d.type) }))
    );
  }, []);

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∞–Ω–∏–º–∞—Ü–∏–∏ –æ–¥–Ω–æ–π –∫–æ—Å—Ç–∏
  const handleDieSettle = useCallback((id: string, settledValue: number) => {
    // –û–±–Ω–æ–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –∫–æ—Å—Ç–∏
    setTray(prev =>
      prev.map(d =>
        d.id === id ? { ...d, value: settledValue } : d
      )
    );
    // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á—ë—Ç—á–∏–∫
    setSettleCount(prev => {
      const next = prev + 1;
      // –ö–æ–≥–¥–∞ –≤—Å–µ –∫–æ—Å—Ç–∏ –∑–∞–≤–µ—Ä—à–∏–ª–∏:
      if (next === tray.length) {
        const sum = tray.reduce((acc, d) => acc + d.value, 0);
        setDisplaySum(sum);
      }
      return next;
    });
  }, [tray]);

  // –í—ã–±–∏—Ä–∞–µ–º layoutConfig –ø–æ —Ç–µ–∫—É—â–µ–º—É —Ä–∞–∑–º–µ—Ä—É tray
  const { cols, zoom } = layoutConfigs.find(c => tray.length <= c.maxCount)!;

  return (
    <div className={s.container}>
      <DiceToolbar onAdd={handleAdd} onRoll={handleRollAll} />

      {warning && (
        <div className={s.warning}>üì¢ {warning}</div>
      )}

      <div className={s.canvasWrapper}>
        <Canvas style={{ width: '100%', height: '100%', display: 'block' }}>
          <OrthographicCamera makeDefault position={[0, 0, 10]} zoom={zoom} />

          <ambientLight intensity={0.4} />
          <directionalLight position={[5, 5, 5]} intensity={0.8} />

          {tray.map((die, idx) => {
            const col = idx % cols;
            const row = Math.floor(idx / cols);
            const x = (col - (cols - 1) / 2) * 2;
            const y = -(row - (Math.ceil(tray.length / cols) - 1) / 2) * 2;

            return (
              <group key={die.id} position={[x, y, 0]}>
                <AnimatedDieR3F
                  id={die.id}
                  type={die.type}
                  value={die.value}
                  spinFlag={spinFlag}
                  removing={die.removing}
                  onRemoved={handleFinalizeRemove}
                  onSettle={v => handleDieSettle(die.id, v)}
                  onClick={() => handleInitRemove(die.id)}
                />
              </group>
            );
          })}

          {/* HTML-–æ–≤–µ—Ä–ª–µ–π: –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—É–º–º—É —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –ø–æ–ª–Ω–æ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ */}
          <Html fullscreen style={{ pointerEvents: 'none' }}>
            {displaySum !== null && (
              <div
                style={{
                  position: 'absolute',
                  top: 8,
                  left: 8,
                  padding: '4px 8px',
                  background: 'rgba(0,0,0,0.6)',
                  color: 'white',
                  borderRadius: 4,
                  fontSize: '1.4rem',
                  userSelect: 'none',
                }}
              >
                –°—É–º–º–∞: {displaySum}
              </div>
            )}
          </Html>

          <OrbitControls enableZoom={false} />
        </Canvas>
      </div>
    </div>
  );
};
