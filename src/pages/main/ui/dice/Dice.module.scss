@mixin scrollAnimated {
  animation-play-state: paused;
  /* Bind the animation to scroll */
  animation-delay: calc(var(--scroll) * -1s);
  /* These last 2 properites clean up overshoot weirdness */
  animation-iteration-count: 1;
  animation-fill-mode: both;
}

body[data-scroll='true'] {
  background-color: transparent;
  animation: body 1s linear;
  @include scrollAnimated();
}
@keyframes body {
  to {
    background-color: var(--secondary-bg-color);
  }
}

.progress {
  height: 3px;
  width: 0%;
  background-color: #fff;
  position: fixed;
  z-index: 1024;
  top: 0;
  left: 0;
  animation: progress 1s linear;
  @include scrollAnimated();
}
@keyframes progress {
  to {
    background-color: var(--accent-btn-color);
    width: 100%;
  }
}

@mixin position($x, $y) {
  position: fixed;
  top: $y;
  left: $x;
}

.cubed6Wrap {
  --size: 10rem;
  @include position(20%, 30%);
  width: 0;
  height: 0;
  perspective: 100vmin;
  z-index: -1;
}

.cubed20Wrap {
  @include position(75vw, 60%);
  width: 0;
  height: 0;
  perspective: 100vmin;
  z-index: -1;
}

.cube {
  transform-style: preserve-3d;
  transform: rotateX(0deg) rotateZ(45deg) rotateY(-45deg);
  animation: cube 1s linear;
  @include scrollAnimated();

  .side {
    position: absolute;
    width: var(--size);
    height: var(--size);
    background-color: transparent;
    backface-visibility: visible;
    top: calc(var(--size) * -0.5);
    left: calc(var(--size) * -0.5);

    font-size: 8rem;
    display: flex;
    justify-content: center;
    align-items: center;
  }
  .top {
    background-color: #e2c044cc;
    transform: rotateX(90deg) translateZ(calc(var(--size) * 0.5));
  }
  .bottom {
    background-color: #7a6824cc;
    transform: rotateX(90deg) translateZ(calc(var(--size) * -0.5));
  }
  .left {
    background-color: #b69a37cc;
    transform: rotateY(90deg) translateZ(calc(var(--size) * 0.5));
  }
  .right {
    background-color: #e2c044cc;
    transform: rotateY(90deg) translateZ(calc(var(--size) * -0.5));
  }
  .front {
    background-color: #7a6824cc;
    transform: translateZ(calc(var(--size) * 0.5));
  }
  .back {
    background-color: #d1b240cc;
    transform: translateZ(calc(var(--size) * -0.5));
  }
}

@keyframes cube {
  to {
    transform: rotateX(360deg) rotateZ(45deg) rotateY(-45deg);
  }
}

.d20 {
  width: var(--base-size);
  height: calc(var(--base-size) * 0.845);
  transform-style: preserve-3d;
  transform: rotateX(0deg) rotateZ(45deg) rotateY(-45deg);
  animation: rotate 1s linear;
  @include scrollAnimated();
}

.d20 > * {
  box-sizing: border-box;
  margin: 0;
  padding: 0;
  list-style-type: none;
}

.d20 > * {
  width: var(--base-size);
  height: var(--base-height);
  position: absolute;
  /*   opacity: 0.8; */
  clip-path: polygon(0 0, 50% 100%, 100% 0);
  transform-origin: top;
  background-color: #000;
  background:
    linear-gradient(180deg, #fff3 0, #fff3 0%, #0000 2%, #0000 100%),
    linear-gradient(300deg, #fff3 0, #fff3 32.5%, #0000 35%, #0000 100%),
    linear-gradient(60deg, #fff3 0, #fff3 32.5%, #0000 35%, #0000 100%),
    linear-gradient(0deg, #ff6f61cc 0, #ff6f61cc 100%);
  display: flex;
  justify-content: center;
  align-items: center;
  font-size: calc(var(--base-size) * 0.4);
  color: #fff;
  line-height: -1;
  padding-bottom: calc(var(--base-size) * 0.3);
  --d: calc(var(--base-size) * 0.69);
}

/* Grouped faces so opposites are together. */
/* They should add up to 21. */

.d20 > *:nth-child(1) {
  transform: rotateY(0.7turn) translateZ(calc(var(--d) * -1)) rotateX(127deg);
}
.d20 > *:nth-child(20) {
  bottom: calc(var(--base-height) * -1);
  transform: rotateY(0.7turn) translateZ(var(--d)) rotateX(307deg);
}

.d20 > *:nth-child(2) {
  transform: rotateY(0.6turn) translateZ(var(--d)) rotateX(11deg);
}
.d20 > *:nth-child(19) {
  bottom: calc(var(--base-height) * -1);
  transform: rotateY(0.6turn) translateZ(calc(var(--d) * -1)) rotateX(191deg);
}

.d20 > *:nth-child(3) {
  bottom: calc(var(--base-height) * -1);
  transform: rotateY(1turn) translateZ(calc(var(--d) * -1)) rotateX(191deg);
}
.d20 > *:nth-child(18) {
  transform: rotateY(1turn) translateZ(var(--d)) rotateX(11deg);
}

.d20 > *:nth-child(4) {
  transform: rotateY(0.3turn) translateZ(calc(var(--d) * -1)) rotateX(127deg);
}
.d20 > *:nth-child(17) {
  bottom: calc(var(--base-height) * -1);
  transform: rotateY(0.3turn) translateZ(var(--d)) rotateX(307deg);
}

.d20 > *:nth-child(5) {
  transform: rotateY(0.8turn) translateZ(var(--d)) rotateX(11deg);
}
.d20 > *:nth-child(16) {
  bottom: calc(var(--base-height) * -1);
  transform: rotateY(0.8turn) translateZ(calc(var(--d) * -1)) rotateX(191deg);
}

.d20 > *:nth-child(6) {
  transform: rotateY(0.9turn) translateZ(calc(var(--d) * -1)) rotateX(127deg);
}
.d20 > *:nth-child(15) {
  bottom: calc(var(--base-height) * -1);
  transform: rotateY(0.9turn) translateZ(var(--d)) rotateX(307deg);
}

.d20 > *:nth-child(7) {
  bottom: calc(var(--base-height) * -1);
  transform: rotateY(0.2turn) translateZ(calc(var(--d) * -1)) rotateX(191deg);
}
.d20 > *:nth-child(14) {
  transform: rotateY(0.2turn) translateZ(var(--d)) rotateX(11deg);
}

.d20 > *:nth-child(8) {
  transform: rotateY(0.1turn) translateZ(calc(var(--d) * -1)) rotateX(127deg);
}
.d20 > *:nth-child(13) {
  bottom: calc(var(--base-height) * -1);
  transform: rotateY(0.1turn) translateZ(var(--d)) rotateX(307deg);
}

.d20 > *:nth-child(9) {
  transform: rotateY(0.4turn) translateZ(var(--d)) rotateX(11deg);
}
.d20 > *:nth-child(12) {
  bottom: calc(var(--base-height) * -1);
  transform: rotateY(0.4turn) translateZ(calc(var(--d) * -1)) rotateX(191deg);
}

.d20 > *:nth-child(10) {
  transform: rotateY(0.5turn) translateZ(calc(var(--d) * -1)) rotateX(127deg);
}
.d20 > *:nth-child(11) {
  bottom: calc(var(--base-height) * -1);
  transform: rotateY(0.5turn) translateZ(var(--d)) rotateX(307deg);
}

@keyframes rotate {
  to {
    transform: rotateX(360deg) rotateY(45deg) rotateZ(-45deg);
  }
}
